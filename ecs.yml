AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select a default subnet ID.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to deploy to.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '5'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
  ContainerImage:
    Description: The Docker image to be deployed 
    Type: String
    Default: tssm0n/hello:latest
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-1924770e
    us-west-1:
      AMIID: ami-07713767
    us-west-2:
      AMIID: ami-241bd844
    eu-west-1:
      AMIID: ami-c74127b4
    eu-central-1:
      AMIID: ami-3b54be54
    ap-northeast-1:
      AMIID: ami-2b08f44a
    ap-southeast-1:
      AMIID: ami-6b61bc08
    ap-southeast-2:
      AMIID: ami-d5b59eb6
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: simple-app
        Cpu: '512'
        Essential: 'true'
        Image:
          Ref: ContainerImage 
        Memory: '512'
        PortMappings:
        - HostPort: 5000 
          ContainerPort: 5000
  EcsElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        Ref: SubnetID
      Listeners:
      - LoadBalancerPort: '5000'
        InstancePort: '5000'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:5000/
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '10'
        Timeout: '5'
      SecurityGroups:
      - Ref: ECSElbSecurityGroup 
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: SubnetID
      LaunchConfigurationName:
        Ref: ContainerInstances
      MinSize: '1'
      MaxSize:
        Ref: MaxSize
      DesiredCapacity:
        Ref: DesiredCapacity
    CreationPolicy:
      ResourceSignal:
        Timeout: PT25M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT25M
        WaitOnResourceSignals: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - Ref: AWS::Region
        - AMIID
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      AssociatePublicIpAddress: "true"
      SecurityGroups: 
      - Ref: ECSSecurityGroup 
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  service:
    Type: AWS::ECS::Service
    DependsOn:
    - ECSAutoScalingGroup
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: '1'
      LoadBalancers:
      - ContainerName: simple-app
        ContainerPort: '5000'
        LoadBalancerName:
          Ref: EcsElasticLoadBalancer
      Role:
        Ref: ECSServiceRole
      TaskDefinition:
        Ref: taskdefinition
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: ECSAutoScalingGroup 
      Cooldown: '1'
      ScalingAdjustment: '1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '80'
      AlarmDescription: Alarm if CPU is too high
      Period: '60'
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: ECSAutoScalingGroup 
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: ECSAutoScalingGroup
      Cooldown: '1'
      ScalingAdjustment: '-1'
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if CPU is too low 
      Period: '120'
      AlarmActions:
      - Ref: ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: ECSAutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            Resource: "*"
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: EC2Role
  ECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: Security Group Used By ECS EC2 Instances 
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5000'
        ToPort: '5000'
        SourceSecurityGroupId:
          Ref: ECSElbSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: "-1"      
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPCID 
  ECSElbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security Group Used By ELB for ECS Instances
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5000'
        ToPort: '5000'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      VpcId: 
        Ref: VPCID 
Outputs:
  dnsname:
    Value: !GetAtt EcsElasticLoadBalancer.DNSName
  ecsservice:
    Value:
      Ref: service
  ecscluster:
    Value:
      Ref: ECSCluster
  taskdef:
    Value:
      Ref: taskdefinition
